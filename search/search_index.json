{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Collaborative Robot Assistant for Object Transport &amp; Assembly","text":""},{"location":"#team-information","title":"Team Information","text":"<p>Team Number: 6  Team Members: Jeremy Chen, Chieh Kao, Hsing-Cheng Wang  Semester and Year: Spring 2025  School: Arizona State University  Class: RAS598 - Experimentation and Deployment of Robotic Systems  Professor: Daniel Aukes </p>"},{"location":"#introduction","title":"Introduction","text":"<p>howard is so handsome As a variety of robots are being increasingly used in manufacturing settings, we are inspired to create a minimal project that covers the three aspects of automated manufacturing: application, collaboration, and simulation. In a real-world warehouse, mobile robots transport items, while robotic arms handle detailed tasks like picking &amp; placing, sorting, and assembly. In this project we will leverage ROS 2 for communication, SLAM for navigation (TurtleBot), and Gazebo for simulation.  We will be integrating a TurtleBot 4 Lite and a UR5 robotic arm for object transport and manipulation. We would also like to dig into the concept of creating digital twins to simulate the behavior of each robot and further verify it with a real-world scenario. </p> <p>Research Question \"A minimal automated manufacturing setting including an object transporting robot, object manipulating robot arm, and a real-time simulation.\" </p> <p>Sample Figure The following image is created by AI just for explanation purposes. </p>"},{"location":"#sensor-integration","title":"Sensor Integration","text":""},{"location":"#how-will-sensor-data-be-used-in-the-code","title":"How will sensor data be used in the code?","text":"<ul> <li> <p>TurtleBot 4 Sensors:</p> <ul> <li>LIDAR &amp; Depth Camera: Used for SLAM-based navigation, object detection, and obstacle avoidance.</li> <li>IMU (Inertial Measurement Unit): Helps improve localization and detect unexpected collisions.</li> <li>Wheel rotation tracker: For the localization of turtlebot.</li> </ul> </li> <li> <p>UR5 Sensors:</p> <ul> <li>Force-Torque Sensor: Provides haptic feedback for grasping adjustments.</li> </ul> </li> </ul> <p>To utilize sensors on each robot, we are planning to feed the sensor input to our local host computer because we suspect the SLAM navigation will require a significant amount of computing power, which might be overwhelming for the Raspberry Pi on the turtlebot. By inputting the Lidar and Depth camera sensor data to local computing power, we will return the navigation result to the turtlebot to command its movement. As the turtlebot approaches the pickup destination, it will trigger a signal to start the UR5 robot arm. The robot arm will pick and place from the stack of objects and place it on top of the turtlebot. To correctly track the height of the stack of items, UR5 will utilize its torque sensor to gently tap the top of the stack to acquire the height of the topmost item. The UR5 will send this torque data to the local computer for height calculation as well as for simulation purposes. </p> <p>On the simulation end, UR5 will be sending out the angles of each actuator, which will then be used in the simulation to reflect the orientation of the robot arm. Similarly, the turtlebot will be sending the data from the wheel speed sensor and the IMU to host computer. The host computer will then integrate the data from the two sources, with the wheel speed sensor as the main input and the IMU as a reference in case of any unexpected incidents.</p>"},{"location":"#interaction-user-interface","title":"Interaction &amp; User Interface","text":"<p>To control and monitor the robots, we will be building a dashboard on the ROS-based UI. The dashboard will include to separate sections as shown in the figure below. On the left side will be the simulation, and on the right side will be all the controls needed. The controls will simply be start, stop, and emergency stop. Another window will show the path that is rendered from the data from Turtlebot.   </p> <p></p>"},{"location":"#control-autonomy","title":"Control &amp; Autonomy","text":"<p>On TurtleBot, we will use SLAM for autonomous navigation, which will detect when it has reached the destination then sends a ROS signal, It can be a QR code on the wall for instance. On UR5, after receiving ROS signal from TurtleBot, robot arm will go to pick the parts from it and place it on the processing-ready zone. Then pick the processed part, place it on the TurtleBot. Finally, sends a completion signal to TurtleBot to continue the next task. </p>"},{"location":"#preparation-needs","title":"Preparation Needs","text":"<p>In order to build a Collaborative Robot Assistant with the TurtleBot 4 and UR5, we need to understand ROS 2 communication, including Topics for real-time data exchange, Services for request-response interactions, and Actions for handling asynchronous tasks. SLAM optimization is important for the TurtleBot\u2019s accurate navigation, ensuring robust mapping and localization. For object manipulation, the UR5 relies on motion planning and inverse kinematics to do smooth and precise movements. Additionally, we will use Gazebo simulation for testing and refining the system in a virtual environment.</p>"},{"location":"#final-demonstration","title":"Final Demonstration","text":"<p>In this demonstration, we will showcase a minimal automated manufacturing setup where a TurtleBot 4 autonomously navigates while transporting an object, and a UR5 robotic arm performs pick-and-place operations. The system will demonstrate real-time multi-robot collaboration, SLAM-based navigation, and adaptive object manipulation, simulating an industrial setting.</p>"},{"location":"#resources-needed","title":"Resources Needed","text":"<ul> <li>TurtleBot 4 with a carrying tray(maybe)</li> <li>UR5 robotic arm on a sturdy table</li> <li>TurtleBot 4 (possibly equipped with a carrying tray for object transport)</li> <li>UR5 robotic arm mounted on a sturdy table</li> <li>ROS 2-based computing setup for communication and coordination</li> <li>LiDAR, depth camera, IMU, and force-torque sensors for navigation and manipulation feedback</li> <li>Gazebo simulation environment for real-time digital twin verification</li> <li>Modular tables to construct an elevated track for TurtleBot 4, ensuring that the robot and UR5 arm operate at the same height.</li> </ul>"},{"location":"#classroom-setup","title":"Classroom Setup","text":"<ul> <li>Open floor space: Ensuring sufficient area for TurtleBot 4 to navigate safely.</li> <li>Dedicated workspace for UR5: A fixed, stable table where the robotic arm will operate.</li> <li>Elevated Track System: Depending on demonstration needs, we may arrange tables to form a track-like platform for TurtleBot 4, allowing it to operate at the same height as the UR5 robotic arm. This will ensure seamless object transfer between the mobile robot and the robotic arm.</li> <li>Minimal environmental interference: Avoid excessive lighting changes or obstructions that may interfere with LiDAR and depth camera data.</li> </ul>"},{"location":"#handling-variability","title":"Handling Variability","text":"<p>The system is designed to dynamically adapt to environmental changes by incorporating various strategies. TurtleBot 4 utilizes LiDAR and a depth camera to identify and avoid unexpected obstacles in real-time, ensuring smooth navigation. Depth sensors compensate for lighting variations, allowing the system to function reliably under changing light conditions. To handle uncertainty in object heights, the UR5\u2019s force-torque sensor taps the top of stacked objects to determine their height, enabling precise grasping. Additionally, sensor-based feedback mechanisms ensure that if a grasp fails, the system will automatically reattempt pick-and-place operations with adjusted parameters. If necessary, the table track system allows the TurtleBot to maintain the required height alignment with the UR5, ensuring seamless interaction between the two components.</p>"},{"location":"#testing-evaluation","title":"Testing &amp; Evaluation","text":"<p>To validate the system\u2019s performance, we will evaluate key metrics that reflect its accuracy, efficiency, and adaptability. Navigation accuracy will be assessed by comparing TurtleBot 4\u2019s planned path with its actual trajectory, measuring deviations, and making necessary SLAM adjustments. The grasping success rate will be determined by calculating the percentage of successful object pickups by the UR5 robotic arm while optimizing grip strength and positioning based on failure rates. Task completion time will be measured to evaluate the overall efficiency of transport and manipulation, ensuring that each task is completed as swiftly as possible. Additionally, error recovery will be analyzed by examining the system\u2019s ability to dynamically handle failures through mechanisms such as obstacle avoidance, reattempted grasps, and recalculated navigation paths.</p>"},{"location":"#impact","title":"Impact","text":"<p>As ROS2 is a new topic for all of us, we can learn the valuable lesson of how to integrate different systems and also to create a simulation with Gazebo. By going through a hands-on deployment of our system, we can have a grasp on the basic topics including but not limited to: 1. The communication among multiple robots. 2. Creating a simulation with Gazebo. 3. Sensor fusion.</p> <p>We aim to create a reproducible framework for future multi-robot systems.</p>"},{"location":"#advising","title":"Advising","text":"<p>In the near future, we will need guidance from Prof. Aukes\u2019s especially on SLAM and Gazebo for a collaborative robotic system. To fulfill multi-robot coordination, digital twin simulation, and real-world implementation, we will need Prof. Aukes\u2019s advice on the data flow and possible barriers so we can ensure our project\u2019s completion and all the interaction between the TurtleBot 4 Lite and UR5 robotic arm.</p>"},{"location":"#gantt-chart-project-planning","title":"Gantt Chart Project Planning","text":""},{"location":"background/","title":"Background","text":""},{"location":"background/#introduction","title":"Introduction","text":""},{"location":"background/#conclusions","title":"Conclusions","text":""},{"location":"background/#references","title":"References","text":""},{"location":"charts/","title":"Charts","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"This is the index to a subfolder","text":"<p>Things to discuss</p>"},{"location":"subfolder/another-subfile/","title":"This is a secondary sub page","text":"<p>Things to discuss</p>"}]}